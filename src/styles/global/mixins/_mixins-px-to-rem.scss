////***------------------ Rem Mixin ------------------**////

/*
MIXIN DETAILS = http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/

* Accepts either px or rem as an input value
* Accepts (almost) any property as an input, not only font-size
* Accepts multiple values, like 10px 20px (for padding or margin as an example)

* The mixin relies on a baseline of 10px
* The mixin relies on a function to parse the integer from a value with a unit
* We define a list of values for both units
* We iterate through each value in the given parameter $values
* If the value is either auto or 0, we append it to the list as-is
* If the value has a unit, we split it to get both the unit and the raw value
* We append according values to the lists depending on the unit of the given value
* If the two lists are the same, we ouput only one (like margin-top: 0)
* We output the result

There are still some issues with this mixin:

* Doesn’t work with all properties (border shorthand among others)
* Doesn’t fallback if you input a wrong value (wrong unit or unitless value as an example)
* Relies on a defined baseline; however this is easily fixed by adding a $baseline parameter to the mixin
* Relies on a parseInt() function; I’ve proposed it to Compass, let’s hope they add it anytime soon
* Doesn't recognize !important
* Deosn't work with percentages %

/*

** - EXAMPLE: - **
html {
  font-size: 62.5%;
}

body {
  @include rem(font-size, 1.6rem);
  @include rem(padding, 20px 10px);
}
… outputs:

html {
  font-size: 62.5%;
}

body {
  font-size: 16px;  // Fallback for IE8
  font-size: 1.6rem;
  padding: 20px 10px; // Fallback for IE8
  padding: 2rem 1rem;
}

*/

@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px: (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px: append($px, $value);
      $rem: append($rem, $value);

    } @else {

      $unit: unit($value); /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" { /* 7 */
        $px: append($px, $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px: append($px, ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem { /* 8 */
    #{$property}: $px; /* 9 */

  } @else {

    #{$property}: $px; /* 9 */
    #{$property}: $rem; /* 9 */
  }
}
